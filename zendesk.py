import undetected_chromedriver as webdriver
from TempMail import TempMail  # imports everything from TempMail library

import re
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import WebDriverException
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.action_chains import ActionChains
import string
import random
import time
import requests
from apiclient import discovery
from apiclient import errors
from httplib2 import Http
from oauth2client import file, client, tools
import base64
from bs4 import BeautifulSoup
import re
import time
import dateutil.parser as parser
from datetime import datetime
import datetime
import csv
import email
import imaplib


user = [ 'i.nforiphahintuniversity123@gmail.com', 'in.foriphahintuniversity123@gmail.com', 'inf.oriphahintuniversity123@gmail.com', 'info.riphahintuniversity123@gmail.com', 'infor.iphahintuniversity123@gmail.com', 'infori.phahintuniversity123@gmail.com', 'inforip.hahintuniversity123@gmail.com', 'inforiph.ahintuniversity123@gmail.com', 'inforipha.hintuniversity123@gmail.com', 'inforiphah.intuniversity123@gmail.com', 'inforiphahi.ntuniversity123@gmail.com', 'inforiphahin.tuniversity123@gmail.com', 'inforiphahint.university123@gmail.com', 'inforiphahintu.niversity123@gmail.com', 'inforiphahintun.iversity123@gmail.com', 'inforiphahintuni.versity123@gmail.com', 'inforiphahintuniv.ersity123@gmail.com', 'inforiphahintunive.rsity123@gmail.com', 'inforiphahintuniver.sity123@gmail.com', 'inforiphahintunivers.ity123@gmail.com', 'inforiphahintuniversi.ty123@gmail.com', 'inforiphahintuniversit.y123@gmail.com', 'inforiphahintuniversity.123@gmail.com', 'inforiphahintuniversity1.23@gmail.com', 'inforiphahintuniversity12.3@gmail.com', 'a.hmed78978zahidkamal@gmail.com', 'ah.med78978zahidkamal@gmail.com', 'ahm.ed78978zahidkamal@gmail.com', 'ahme.d78978zahidkamal@gmail.com', '.78978zahidkamal@gmail.com', '7.8978zahidkamal@gmail.com', '78.978zahidkamal@gmail.com', '789.78zahidkamal@gmail.com', '7897.8zahidkamal@gmail.com', '78978.zahidkamal@gmail.com', '78978z.ahidkamal@gmail.com', '78978za.hidkamal@gmail.com', '78978zah.idkamal@gmail.com', '78978zahi.dkamal@gmail.com', '78978zahid.kamal@gmail.com', '78978zahidk.amal@gmail.com', '78978zahidka.mal@gmail.com', '78978zahidkam.al@gmail.com', '78978zahidkama.l@gmail.com', 'a.hmedkamal7894578@gmail.com', 'ah.medkamal7894578@gmail.com', 'ahm.edkamal7894578@gmail.com', 'ahme.dkamal7894578@gmail.com', '.kamal7894578@gmail.com', 'k.amal7894578@gmail.com', 'ka.mal7894578@gmail.com', 'kam.al7894578@gmail.com', 'kama.l7894578@gmail.com', 'kamal.7894578@gmail.com', 'kamal7.894578@gmail.com', 'kamal78.94578@gmail.com', 'kamal789.4578@gmail.com', 'kamal7894.578@gmail.com', 'kamal78945.78@gmail.com', 'kamal789457.8@gmail.com']
gmail_pass=[ 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'aybvjyvtikcbwhpw', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'niwpyeohpiriovti', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl', 'flbnwcgvzwdjnqrl']

host = "imap.gmail.com"


# Creating a storage.JSON file with authentication details
def delete_cache(driver):
    driver.switch_to.window(driver.window_handles[-1])  # Switch window to the second tab
    driver.get('chrome://settings/clearBrowserData')  # Open your chrome settings.
    perform_actions(driver,
                    Keys.TAB * 2 + Keys.DOWN * 4 + Keys.TAB * 7 + Keys.ENTER)  # Tab to the time select and key down to say "All Time" then go to the Confirm button and press Enter


def perform_actions(driver, keys):
    actions = ActionChains(driver)
    actions.send_keys(keys)
    time.sleep(25)
    print('Performing Actions!')
    actions.perform()

def get_email_bodys(email):
    url = f'http://127.0.0.1:5000/read/{email}'

    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception if the request was unsuccessful

        data = response.json()
        if "data" in data and len(data["data"]) > 0:
            body = data["data"][0]["body"]
            return body
        else:
            return None  # No matching email found or empty body
    except requests.exceptions.RequestException as e:
        print("Error:", e)
        return None  # Request failed


# Example usage:


def get_total_emails(mai):
    # Create server and login
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(user[mai], gmail_pass[mai])

    # Using SELECT to choose the INBOX folder
    mail.select("INBOX")

    # Get the total number of emails in the INBOX folder
    _, response = mail.search(None, "0ALL")
    return len(response[0].split())


def generate_random_string(length):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

def generate_verification_code(length):
    return ''.join(random.choices('0123456789', k=length))
def generate_random_email():
    username_length = random.randint(5, 10)
    domain = "@"+generate_random_string(username_length)+".com"
    username = generate_random_string(username_length)
    email = username + domain
    return email

import imaplib
import email
from email.header import decode_header

def get_email_body(email_message):
    body = ""
    for part in email_message.walk():
        content_type = part.get_content_type()
        if "text/plain" in content_type:
            charset = part.get_content_charset()
            body = part.get_payload(decode=True).decode(charset)
            return body
    if email_message.is_multipart():
        for part in email_message.walk():
            content_type = part.get_content_type()
            if "text/plain" in content_type:
                charset = part.get_content_charset()
                body = part.get_payload(decode=True).decode(charset)
                break
    else:
        body = email_message.get_payload(decode=True).decode(email_message.get_content_charset())
    return body

def read_email_from_gmail(contain_body=True, mai=0):
    # Create server and login
    mail = imaplib.IMAP4_SSL(host)
    mail.login(user[mai], gmail_pass[mai])

    # Using SELECT to choose the emails.
    res, _ = mail.select('INBOX')

    # Search for the most recent email
    res, message_numbers = mail.search(None, 'SEEN', 'ALL')
    if message_numbers:
        # Get the most recent message number
        latest_message_number = message_numbers[0].split()[-1]

        # Fetch the most recent email
        res, msg_data = mail.fetch(latest_message_number, "(RFC822)")

        # Extract the email data
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])

                # Decode subject and sender
                subject, _ = decode_header(msg["Subject"])[0]
                sender, _ = decode_header(msg["From"])[0]

                # Store the email body
                body = get_email_body(msg)

                # Print Sender, Subject, Body
                print("From    : ", sender)
                print("Subject : ", subject)
                if contain_body:
                    print("Body    : ", body)

    # Close the mailbox
    mail.close()
    mail.logout()

    # Return the email data
    return  body






from tempmail import EMail
import time
import random
import string
from user_agent import generate_user_agent, generate_navigator
from extension import proxies
mai=62
def generate_unique_username(base_name="user"):
    # Using the current timestamp (to the microsecond) to ensure uniqueness
    timestamp = str(int(time.time() * 1000000))

    # Generate a random string of 5 characters for added uniqueness
    random_str = ''.join(random.choices(string.ascii_lowercase + string.digits, k=30))

    return f"{base_name}_{random_str}_{timestamp}"


def convertTuple(tup):
    strc = ''
    c = len(tup)

    for item in range(25):
        strc = strc + strc.join(tup[item])

    return strc


letters = string.ascii_lowercase
usernameStr = ['zahidkamal78978@gmail.com', 'zahid60@gmail.com', '78978@gmail.com']

Str = ''

from selenium.webdriver.chrome import service

mobile_emulation = {"deviceName": "iPhone SE"}
capa = DesiredCapabilities.CHROME
capa["pageLoadStrategy"] = "none"
count = 0
recount = 20
total = 0
t = 0
IMAP_SERVER = 'imap.gmail.com'
IMAP_PORT = 993
def check_for_new_email(host, user, ):
    previous_email_body = None  # Store the body of the previous email
    while True:
        imap = imaplib.IMAP4_SSL(host)
        imap.login(user, )
        imap.select('inbox')

        # Retrieve the last email
        _, data = imap.search(None, 'ALL')
        email_ids = data[0].split()
        latest_email_id = email_ids[-1] if email_ids else None

        if latest_email_id:
            _, data = imap.fetch(latest_email_id, '(RFC822)')
            raw_email = data[0][1]
            email_message = email.message_from_bytes(raw_email)
            latest_email_body = get_email_body(email_message)

            if latest_email_body != previous_email_body:
                previous_email_body = latest_email_body
                imap.close()
                imap.logout()
                return email_message

        imap.close()
        imap.logout()
        time.sleep(60)

def fetchdata(fp):
    file_path=fp
    fetched_data = []

    with open(file_path, 'r') as file:
        # Read each line from the file
        for line in file:
            # Split the line into email, number, and link using spaces as separators
            parts = line.strip().split(' ')
            if len(parts) == 3:
                email, number, link = parts
                fetched_data.append((email, int(number), link))

    # Display the fetched email, number, and link triplets
    for email, number, link in fetched_data:
        print(f"Email: {email}, Number: {number}, Link: {link}")

def read_email_from_gmail(count=1, contain_body=True,mai=0):

    # Create server and login
    mail = imaplib.IMAP4_SSL(host)
    mail.login(user[mai], gmail_pass[mai])

    # Using SELECT to chose the e-mails.
    res, messages = mail.select('INBOX')

    # Caluclating the total number of sent Emails
    messages = int(messages[0])

    # Iterating over the sent emails
    for i in range(messages, messages - count, -1):
        # RFC822 protocol
        res, msg = mail.fetch(str(i), "(RFC822)")
        for response in msg:
            if isinstance(response, tuple):
                msg = email.message_from_bytes(response[1])

                # Store the senders email
                sender = msg["From"]

                # Store subject of the email
                subject = msg["Subject"]

                # Store Body
                body = ""
                temp = msg
                if temp.is_multipart():
                    for part in temp.walk():
                        content_type = part.get_content_type()
                        if "text/plain" in content_type or "text/html" in content_type:
                            charset = part.get_content_charset()
                            body = part.get_payload(decode=True).decode(charset)
                            break
                else:
                    body = temp.get_payload(decode=True).decode(temp.get_content_charset())

                # Print Sender, Subject, Body
                print("-"*50)  # To divide the messages
                print("From    : ", sender)
                print("Subject : ", subject)
                if(contain_body):
                    print("Body    : ", body)
                    return temp
def get_email_b(email, keyword):

        url = f'http://127.0.0.1:5000/readby/{email}/{keyword}'

        try:
            response = requests.get(url)
            response.raise_for_status()  # Raise an exception if the request was unsuccessful

            data = response.json()
            email_bodies = []

            if "data" in data:
                for item in data["data"]:
                    body = item.get("body", "")
                    email_bodies.append(body)

            return email_bodies
        except requests.exceptions.RequestException as e:
            print("Error:", e)
            return []

if __name__ == "__main__":
    while (1):

        numb = "0123456789"
        if (total >= 10):
            break

        url = 'https://www.zendesk.com/register/#step-1'

        fnumbers = ["3310504637","3310504636","3310504634","3310504633","3310504630","3310504629","3310504625","3310504624","3310504623","3310504620","3310504618","3310504615","3310504614","3310504612","3310504611","3310504606","3310504603","3310504599","3310504596","3310504595","3310504593","3310504587","3310504582","3310504581","3310504580","3310504575","3310504573","3310504572","3310504571","3310504566","3310504565","3310504563","3310504562","3310504561","3310504560","3310504556","3310504554","3310504553","3310504499","3310504491","3371851139","3371859678","3371852131","3371855824","3371856481","3371851141","3371856687","3371850472","3371853813","3371857003","3371850653","3371852226","3371852685","3371852616","3371853538","3371850473","3371852227","3371859746","3371855586","3371855064","3371850178","3371854882","3371858800","3371850573","3371858990","3371850985","3371856586","3371857486","3371857671","3371856091","3371858909","3371857124","3371855315","3371859352","3371858645","3371851173","3371853630","3371855907","3371858032","3371853782","3371856791","3371858322","3371858001","3371855856","3371853015","3371853657","3371853578","3371855656","3371857283","3371859290","3371852035","3371859125","3371857744","3371851650","3371858378","3371859440","3371859101","3371858257","3371858629","3371853591","3371854102","3371858571","3371852695","3371855397","3371858469","3371856203","3371855992","3371858338","3371859925","3371856966","3371856484","3371857595","3371857031","3371855478","3371858115","3371857397","3371855409","3371854231","3371853534","3371856419","3371857730","3371851535","3371859611","3371859016","3371859304","3371857804","3371853676","3371859066","3371857777","3371856405","3371853588","3371850357","3371850282","3371856418","3371855162","3371851762","3371855504","3371854015","3371851368","3371850728","3371851454","3371854449","3371855207","3371856816","3371855259","3371859039","3371854537","3371856371","3371856456","3371859676","3371858951","3371856352","3371859671","3371856830","3371854262","3371856606","3371852507","3371858107","3371859027","3371853874","3371859072","3371855591","3371858283","3371859615","3371850841","3371853194","3371857477","3371852143","3371856067","3371850911","3371853148","3371859283","3371856584","3371856561","3371853231","3371853975","3371850310","3371858450","3371856383","3371851836","3371852007","3371852599","3371859205","3371855413","3371854376","3371854332","3371857145","3371853394","3371855042","3371859824","3371858041","3371856684","3371857082","3371854511","3371851419","3371851098","3371855449","3371857805","3371857464","3371851874","3371850053","3371858552","3371855950","3371859454","3371852237","3371854372","3371853575","3371855962","3371858603","3371859478","3371850095","3371851896","3371856955","3371854768","3371857147","3371857259","3371852217","3371856370","3371857916","3371851558","3371855301","3371855887","3371852655","3371851397","3371852889","3371851737","3371853432","3371850140","3371851307","3371855428","3371851544","3371855545","3371856263","3371858842","3371855177","3371858096","3371858364","3371855523","3371858574","3371855897","3371854276","3371852063","3371855344","3371850714","3371852595","3371857510","3371852235","3371852994","3371856409","3371855019","3371851324","3371858070","3371859071","3371858443","3371850933","3371857331","3371858707","3371858702","3371859239","3371851815","3371856287","3371850643","3371858970","3371858218","3371856291","3371854699","3371858527","3371859961","3371854163","3371853634","3371856748","3371852869","3371856328","3371855271","3371859706","3371857837","3371858745","3371856426","3371856663","3371857369","3371855646","3371859825","3371857791","3371858486","3371853433","3371851090","3371857912","3371854440","3371856666","3371851212","3371859067","3371856952","3371855104","3371856682","3371850096","3371857162","3371859211","3371859941","3371856516","3371855247","3371855751","3371850587","3371859584","3371858535","3371850870","3371855619","3371856089","3371855431","3371853070","3371855755","3371852290","3371851722","3371859517","3371858313","3371854857","3371857829","3371856372","3371858870","3371854518","3371859977","3371853016","3371851616","3371858720","3371856296","3371855069","3371853074","3371853225","3371853406","3371854828","3371858501","3371858212","3371852104","3371850374","3371855456","3371850122","3371859263","3371854117","3371856571","3371859563","3371859845","3371856386","3371859830","3371858031","3371856471","3371851184","3371855149","3371854149","3371859355","3371852993","3371858658","3371858831","3371855532","3371853850","3371851372","3371855361","3371859390","3371852592","3371853779","3371853121","3371855692","3371856544","3371853854","3371859883","3371855084","3371855991","3371856619","3371855325","3371855894","3371853853","3371856131","3371850963","3371857793","3371854103","3371850072","3371859533","3371850378","3371854769","3371859449","3371851810","3371856881","3371855370","3371850383","3371858279","3371859375","3371859240","3371852750","3371850521","3371853735","3371852262","3371859451","3371858948","3371858680","3371855296","3371853331","3371858864","3371853085","3371850115","3371858955","3304111874","3375356080","3375350708","3375354895","3304118926","3304115186","3304117337","3304111858","3304118504","3375355369","3375350747","3375356154","3304113927","3375353915","3304114903","3304119156","3304117141","3375350167","3375356432","3375351282","3304118002","3304110004","3304115568","3304119379","3375357472","3304119973","3304112034","3375353032","3304117420","3375358324","3375356169","3304110354","3375351109","3304116061","3375358984","3375351307","3304114449","3304111415","3375351595","3375353025","3375356913","3304110999","3375359204","3304113270","3375357532","3375355285","3304114103","3304111291","3304117371","3304113312","3375354450","3304119455","3304113996","3304110228","3304116031","3304114393","3304114050","3304114313","3375353088","3304113451","3304114874","3304111300","3304111339","3375355741","3304118072","3304110504","3304114040","3375351429","3375358534","3375356855","3375354133","3375353974","3375356316","3304115368","3375359171","3304110229","3304110708","3304115778","3304117538","3375356594","3375359818","3375354407","3375353948","3304119738","3304118431","3375358619","3304119804","3375353291","3375352535","3304119708","3304116366","3375352205","3304114791","3375350665","3375357748","3304117074","3304110011","3304111909","3375358027","3375352242","3375358610","3304113453","3304118848","3304116321","3304110974","3375356089","3304119930","3375354985","3375353545","3375358861","3375354909","3375350587","3375358096","3304118792","3304119597","3375355345","3304119228","3375355608","3304113473","3375357792","3304114261","3304114629","3375355631","3304114338","3375359512","3304118623","3304110194","3375357218","3375356049","3304112619","3304116891","3304113355","3304114189","3375358232","3304114209","3375356327","3304119942","3304114029","3375355372","3304115702","3304113965","3375350367","3375358457","3304115485","3304110361","3304112693","3375354619","3304115518","3375352116","3304114212","3375354626","3304118887","3375357617","3304113767","3375358424","3375351636","3304117935","3304115318","3304119475","3304111860","3375350829","3304112649","3304116105","3304112774","3375358391","3304113769","3304113762","3375355662","3375358920","3304112782","3375356313","3304112553","3304115980","3375356613","3304113924","3304115593","3304119774","3304113109","3304115641","3375359019","3304110241","3304119492","3375355893","3304116710","3304112757","3375356183","3304110704","3304111169","3375353629","3304117456","3304118168","3304118359","3375354804","3304116547","3304117520","3304117712","3375352602","3304117863","3304110457","3375352584","3304111426","3375355049","3304118183","3304115546","3375356701","3304110679","3375352128","3375359101","3375351324","3304114886","3304117855","3375352521","3375355519","3304112418","3304113494","3304112027","3375355794","3304114510","3304116644","3375353548","3304116303","3375357123","3375353748","3375358656","3304112865","3304116673","3304119183","3304117298","3375350204","3304115384","3375354576","3375355511","3375358192","3304117717","3375350378","3375351691","3304110190","3304112068","3304115015","3375353041","3304113093","3375356015","3304114859","3304110124","3375359324","3304118561","3375355398","3375353029","3375353569","3304114309","3375353565","3375358968","3375351929","3304112796","3304114527","3304110025","3304114774","3304116850","3304114943","3375354001","3304111012","3375355937","3375356702","3375357813","3375352661","3304112197","3304115547","3375355279","3304117759","3304114284","3304115745","3375351454","3304112627","3304116170","3304112572","3304119570","3304113933","3375358155","3375353535","3304117526","3375352576","3375357650","3304111736","3375351533","3304118704","3375358632","3304110125","3304112567","3304117135","3375356291","3304113366","3304111671","3304115607","3375357395","3304117362","3304118781","3304116447","3304110146","3375356436","3375353427","3304113472","3304115041","3304114271","3304119523","3304115700","3375359381","3375359918","3375357154","3375355595","3375352586","3375353580","3375355472","3375350785","3304111137","3304112692","3304119881","3375354602","3375350683","3375359602","3304117784","3304119253","3375356481","3375356499","3375350540","3304113410","3375350093","3375352211","3375355845","3304110209","3304115698","3375355648","3375357002","3375355787","3304116338","3375355194","3375357206","3375350156","3304119319","3304113419","3375354424","3304114195","3375353936","3304117112","3375350215","3304111931","3304114253","3304113797","3304119590","3304113070","3375356975","3304113652","3375358390","3375358243","3304116137","3304119132","3304115066","3304119962","3304119694","3304119042","3375356067","3304116337","3375356272","3375354786","3375352444","3375359865","3375355260","3375356955","3304112462","3304115010","3375356804","3304116153","3375359125","3375350956","3375351613","3375355515","3304119136","3304116201","3375359717","3304110812","3304115701","3375354185","3304113274","3304113749","3375351018","3375351549","3375350861","3375356180","3304115479","3304110314","3375352072","3304116466","3375351755","3375353061","3375359853","3304111101","3375351817","3375351754","3375356502","3304116410","3304113411","3375356730","3375357512","3375353918","3375350177","3304118774","3375353985","3304113824","3304114255","3375350882","3304119422","3304119373","3304119792","3304119781","3375352621","3304111907","3304113150","3375355880","3304112153","3304114672","3304114262","3375353973","3375356037","3304118747","3375353434","3375354443","3375353752","3304112151","3375351831","3375359997","3375359334","3375357762","3375351861","3304110689","3375357221","3304119166","3375359556","3304116389","3375352244","3304116220","3375358766","3375355599","3375359106","3375353081","3375353850","3375358911","3304115491","3304113293","3375353777","3304111045","3375358025","3375357773","3375352052","3304112825","3375356739","3375355410","3304117590","3375359776","3375356767","3375353771","3304115507","3304114946","3304110317","3304111178","3375353688","3375350234","3304118814","3375354748","3304118235","3375357488","3375353248","3304118456","3375353186","3375356841","3304118953","3304110934","3304112469","3375351232","3304110855","3304117365","3304111718","3375359434","3375359440","3375357667","3375351604","3304119025","3304116874","3375351529","3375354776","3304117020","3304118165","3304110289","3304116709","3304112135","3375359032","3304114707","3304110079","3375350874","3304110966","3304115804","3375357343","3304114926","3304116021","3304116123","3304114285","3375355548","3375359868","3375356469","3304115345","3375356648","3375357041","3304113063","3375352189","3375353669","3375356706","3304114392","3304117180","3304118694","3375358796","3375350522","3304113185","3304117343","3304119284","3375357455","3375357754","3304118839","3304117864","3375351998","3304110548","3304113663","3304110536","3304112878","3304116290","3375358675","3375359169","3304112807","3375351681","3304113544","3304112356","3304111220","3304115183","3375350811","3304113202","3375351795","3304110697","3375352063","3375356349","3375356700","3375356177","3375359644","3375355652","3304111306","3375353444","3304117149","3375351848","3375358251","3304115349","3375351357","3375352923","3304117367","3375354721","3375359788","3304118010","3304119625","3375359286","3375358807","3304111355","3304111465","3375357288","3375352810","3304114699","3304116609","3304118973","3375355343","3304112876","3304117264","3304111989","3304111246","3304116163","3304110429","3304117530","3304118588","3304118687","3375355711","3375359337","3304114837","3304118427","3304111489","3375356302","3304118140","3375359084","3375358742","3304115789","3304117608","3375357075","3304117247","3375355241","3375352600","3375359584","3304110084","3375352791","3304112872","3375350430","3375355154","3375356696","3375358536","3304110251","3375357172","3375351068","3375358372","3304116266","3304119200","3375357393","3375358338","3304113306","3304118376","3375351643","3375353392","3375351408","3304110286","3304112801","3304110586","3304111760","3375355629","3304118770","3375353886","3375358176","3375351396","3304113667","3304116412","3304119655","3304119260","3304115284","3304118969","3375357769","3375353526","3375354792","3304119545","3304113402","3304115295","3304110031","3304118769","3304117340","3375352336","3304114073","3375355350","3375352846","3304116280","3304117707","3304113330","3375359028","3375353306","3304116755","3304112239","3304116963","3375355277","3375356875","3304116595","3304118046","3375353065","3375355294","3375353737","3375352157","3304117968","3375350231","3304112887","3304114880","3304119377","3304112399","3304118900","3304112970","3375354479","3304118989","3304110682","3304114422","3304119959","3304117747","3304110458","3375356075","3304112556","3375353423","3304110027","3375356821","3375354258","3375352228","3304111557","3304113408","3304115250","3304110698","3375356691","3304116606","3375354328","3304112905","3375355566","3375358313","3304112735","3304113879","3304115838","3304114061","3304116658","3375354754","3304111813","3375357991","3304115739","3375357359","3304112180","3375356476","3375350208","3375353903","3375354867","3304112351","3304112682","3375359109","3304113196","3375358896","3375359943","3375359007","3304114159","3375355400","3375357648","3375353117","3375356458","3375353311","3375357824","3375359550","3375358882","3375351576","3375356850","3304113133","3304113935","3304112238","3304115571","3304113283","3304114844","3304111996","3375350173","3375350182","3375356326","3304113994","3375355060","3375355767","3375355691","3375355916","3375355268","3375359712","3375353026","3304113938","3375353119","3304111067","3375354381","3304112733","3304116557","3304111399","3304116913","3304118388","3304117065","3375352995","3304114415","3304115622","3375350453","3375350055","3304119101","3375357510","3304115297","3304117723","3304119458","3375358471","3304114162","3375357864","3304115078","3304113644","3304115975","3304113395","3304112795","3304118153","3304115852","3375357772","3375351860","3304112322","3304118578","3304117216","3375355569","3375350290","3375358343","3375359122","3304118300","3375351664","3304119658","3375351032","3304114409","3304111122","3375353206","3304111952","3375357854","3304112152","3375357853","3304116790","3375356057","3304113273","3304114624","3375351802","3304113421","3375356287","3304116589","3304110749","3304112081","3304119056","3304118482","3304116630","3375356470","3304118420","3375352284","3375355851","3304112361","3375352626","3375354506","3304111550","3375353641","3375358965","3375359628","3304118626","3304117441","3304117943","3304115292","3304110492","3304113738","3304117504","3375353084","3375358444","3375356864","3304114885","3375353816","3304113455","3375350616","3304115457","3375353764","3375355367","3375355553","3375357056","3304111115","3375353018","3304113846","3375355806","3375358959","3375350449","3375356275","3375350318","3375350675","3375354970","3375351372","3375357811","3375358848","3375359217","3375359174","3304116932","3304118067","3304110358","3375354022","3375352505","3304113888","3375357833","3375351540","3304113227","3304118022","3304115857","3304116225","3375353274","3304119304","3304119656","3304110416","3375354313","3375357685","3304119991","3375359485","3375354307","3304113794","3375356194","3375358071","3375353606","3304115776","3375353994","3304116334","3375353245","3375357328","3304112233","3375355772","3375358480","3304118081","3375357611","3304111645","3375359263","3304117854","3375352490","3304113780","3304118205","3375356097","3304116597","3304110197","3304110753","3304111026","3375354926","3304110707","3304114863","3375354546","3375354788","3304114134","3304110824","3304114515","3375357179","3304116700","3304116707","3304117681","3304114258","3304112465","3304116525","3304117138","3304112106","3375355723","3375355574","3304111590","3304116267","3375354577","3375351624","3375354405","3304111593","3375355104","3375350289","3375357040","3375358019","3304115519","3304110088","3375350762","3375350275","3304112969","3304112055","3375353933","3304115522","3375359973","3304118474","3375350789","3304110424","3304110297","3304110613","3304114411","3375358854","3375355592","3375351431","3304111190","3304116717","3375355163","3304110722","3304112470","3304114673","3304116649","3375352613","3375357826","3375352009","3304116212","3375350153","3375353300","3304116741","3304119944","3375352878","3375354644","3304114889","3304116096","3375354991","3304117055","3375356647","3375351198","3375356106","3375359971","3304114214","3375357414","3375354089","3304114172","3304110721","3304113623","3304111212","3304113665","3304111958","3375355558","3375358860","3304119015","3375352395","3375359281","3304112004","3375359764","3375358618","3304110945","3375351057","3375357794","3304119793","3375353962","3304119918","3304116776","3375350198","3304110418","3375351421","3304119128","3375352193","3375354435","3304112060","3304115665","3375356284","3304111646","3375352871","3375359922","3304116953","3375353622","3304115064","3375353705","3304118285","3375354921","3375350210","3304114403","3375354706","3304113197","3304112092","3304119280","3375358302","3375358850","3304116463","3375350912","3375357447","3304112900","3375350684","3304113688","3375350913","3375357281","3304119928","3304116817","3375351138","3304117778","3375356919","3375355657","3304111921","3375355905","3375354400","3304118378","3375354415","3375350642","3304110677","3304118409","3375350724","3375355635","3375352380","3375353458","3375355052","3304110736","3375354392","3375357314","3375359100","3375356399","3375353099","3304115356","3375352963","3375354565","3304110353","3375353258","3375351954","3375358901","3375353758","3304110984","3375357890","3304115416","3375354889","3304119622","3304117705","3375354879","3375351593","3304118612","3375356606","3375354171","3304114168","3304116798","3375358894","3304115377","3304113850","3304116358","3304110528","3304115866","3304112524","3304115283","3304118320","3375354150","3304111123","3304110859","3375357429","3375353849","3304113211","3375354597","3304119635","3375353882","3375353365","3375355039","3304119331","3375353167","3304119512","3304111559","3304118590","3304113772","3375355327","3324016267","3312711293","3333715783","3316032113","3326995348","3332448174","3331373583","3316685494","3319305413","3325977043","3312090039","3325395934","3316643580","3332151176","3318106044","3302581871","3325672731","3318897783","3312795994","3318724230","3302766847","3327156254","3315343167","3328382040","3014031690","3315802595","3333806582","3318367104","3149416015","3317135093","3323112297","3102595080","3324631483","3317758233","3331949733","3325065586","3315845774","3327108489","3315129038","3323833285","3304918503","3322627320","3322658893","3331295626","3325277161","3309276481","3322592050","3138525603","3328021383","3312172720","3311432917","3312659077","3321733716","3318385218","3323765588","3319927068","3314133202","3128834753","3326694619","3024537424","3322029019","3312320313","3322421113","3311387840","3317127142","3239269625","3323788478","3325299532","3312687332","3322216492","3318594170","3303282089","3318369455","3327767809","3325804919","3320952221","3302132679","3326812281","3319349236","3308130605","3308120635","3152437473","3323775435","3319778952","3325279863","3324605734","3334034921","3315050405","3303254185","3328682390","3301276455","3325075592","3331123286","3308156802","3323159894","3110502723","3333862687","3132329241","3325648017","3325836388","3327855950","3325976786","3316641474","3327567174","3306461503","3320599322","3331540172","3309151256","3318478734","3320986406","3308197106","3326241167","3248004021","3331537791","3319025798","3313767740","3325695517","3324225821","3320936980","3334475494","3323135107","3326645694","3325845608","3301031461","3324167031","3314659212","3323691908","3320487008","3318952721","3309896178","3323511522","3316307553","3324271418","3005168472","3327715080","3317348840","3316370474","3305916065","3328560699","3306819123","3322171381","3245255510","3331035023","3314894153","3325683583","3334441190","3327741703","3316527317","3229808830","3326289830","3308508575","3326268857","3315327757","3323718623","3317678063","3331390491","3312922189","3323898371","3323803397","3319578536","3318862080","3304149234","3157184065","3043381457","3333410705","3319841797","3323569036","3318200731","3002609702","3306260668","3322615961","3320727030","3315239338","3327950829","3333943573","3334391181","3307429533","3302419869","3315290070","3332061081","3320387473","3003174769","3314347383","3329120166","3333963688","3303739294","3322941136","3317270913","3312508560","3318064600","3331624576","3302076918","3307066704","3305848301","3315988636","3322845178","3312542904","3242938295","3322060443","3331748084","3324125425","3306199097","3029134903","3330750556","3334591760","3316018365","3316595851","3323878869","3331777129","3304921102","3321449340","3320719040","3314143926","3334296846","3320273041","3303149968","3322420676","3315483257","3316150977","3327935162","3310239084","3303483117","3318835140","3306112976","3332003301","3331507313","3329263923","3325370350","3324738239","3321031651","3319638513","3319731303","3068013004","3311312275","3315265994","3323316012","3326149135","3312030687","3322745764","3315838926","3212427195","3326132726","3331337153","3301030085","3323854274","3107577711","3323035860","3304268929","3322242943","3138034371","3305688638","3315652944","3316740395","3312955144","3306739092","3329150744","3327735650","3312719482","3316437639","3322466670","3323896298","3313295623","3323623499","3332219250","3329037975","3323647072","3319340261","3312963408","3331319118","3333709217","3324643680","3318907275","3216492102","3328864127","3317965503","3312265918","3072037395","3317723495","3305834239","3333963719","3325047577","3319894397","3327447220","3313302264","3315206790","3330781093","3313069668","3323487415","3237937044","3322986113","3323323040","3315917051","3317955308","3325221887","3331696780","3318654335","3327848857","3325453882","3018579792","3332094258","3325666601","3161910650","3317479154","3327015973","3305422847","3306530861","3328599206","3329141739","3325219780","3322451931","3317979479","3333378648","3306762676","3317699497","3319167490","3302864737","3318097821","3323194809","3334108657","3322315394","3327535292","3315981815","3332641687","3322473219","3312768969","3322284363","3318001840","3308171175","3318781928","3318467099","3317625546","3307164143","3333941800","3327268716","3318366386","3323266757","3320455807","3325606919","3315253511","3326060808","3332210926","3312031724","3328823402","3314587188","3331660321","3312762407","3325833790","3320932729","3323761470","3313857562","3331756341","3314774674","3331789493","3313410156","3323746091","3306436822","3322772187","3302096645","3334817084","3306536774","3327918385","3318028469","3334062205","3326965272","3312234107","3312511530","3320982674","3310374877","3328578947","3323235570","3317569672","3334170807","3319217546","3306081869","3323683613","3311178853","3313496272","3322071418","3322460833","3333413232","3301244417","3312944820","3323095411","3334069413","3327806079","3306084624","3325035617","3330920447","3316510628","3159026822","3327416255","3305871024","3322001201","3325655309","3318010442","3322586928","3317053860","3316454584","3313805458","3319281668","3331598572","3322351061","3178981592","3313961688","3315829539","3300244147","3327618671","3002753604","3312692175","3318481251","3310048181","3327800021","3312618934","3318937187","3314912769","3005137428","3178336657","3328074703","3318722706","3327808441","3312853553","3304549506","3323899523","3303144565","3329212181","3153073218","3322463253","3305322940","3308439756","3318720468","3304711029","3326643344","3326003862","3308087622","3312616009","3328701559","3303695909","3325783242","3315055512","3327915006","3331338395","3322364083","3321900353","3326882909","3320902620","3316232980","3320562564","3323345599","3318245798","3304183728","3324668475","3323445200","3318037266","3325636901","3304673914","3332146228","3324829789","3307064407","3312030063","3303947325","3333700615","3043271485","3314668318","3334037817","3135308494","3332184164","3327051757","3318184482","3305396692","3215155256","3301241624","3318077313","3312337399","3319241635","3315301835","3323826500","3315871171","3322517709","3313944593","3334547936","3324980609","3315120237","3320465456","3302737796","3302166424","3326128695","3334305695","3320379469","3331396618","3324172149","3316629048","3325060556","3302819497","3313068658","3324478575","3321763783","3334324352","3323289456","3331546890","3327533616","3322633079","3328183170","3303451755","3308279162","3312920479","3315018620","3319339176","3322300267","3301849330","3320395621","3321131893","3332426155","3331398577","3313015815","3305910043","3305195798","3316347402","3303613296","3318628705","3313017423","3317307138","3321313891","3332154973","3322516317","3306066227","3219851505","3315060359","3331642070","3325033276","3017696013","3311368846","3333837582","3315216985","3318992653","3328263990","3324302606","3318121158","3323924940","3320531678","3317394055","3316452941","3073800865","3301748698","3334687093","3313532366","3306355637","3306755842","3327227830","3325767854","3322561004","3065734646","3315878610","3316924551","3308564253","3332396650","3320820819","3312877490","3324358603","3310212605","3325680782","3301959639","3317866735","3304526971","3331766510","3307063213","3324988219","3327402799","3024864620","3315680952","3312425872","3325489626","3315398322","3326490753","3065364142","3324795761","3313732123","3182091269","3326386792","3328907531","3318053290","3327747360","3312714860","3313747900","3334117269","3312564799","3329057467","3306286259","3305281547","3324801718","3326790901","3333957943","3315007025","3325549814","3315330683","3311495539","3325422572","3311458944","3321406728","3303474233","3331699236","3327015452","3322280896","3312530677","3313895298","3319681725","3313917980","3326789045","3322514606","3301969796","3312063032","3322427391","3328506259","3085500100","3303525382","3313246898","3302731139","3323323659","3318058981","3317761110","3316291190","3316240149","3330679459","3319623896","3331523856","3323494177","3313524698","3333292157","3320962016","3308567484","3319047375","3313609394","3319884713","3334629965","3322718545","3309267857","3318247040","3328161622","3315006545","3332165826","3329178319","3305285645","3318147464","3312181764","3314008147","3318306642","3328412404","3033617515","3302804997","3315278145","3319816373","3328935516","3318559243","3320482105","3321400635","3303173558","3325602336","3322502924","3317834065","3311047181","3311320395","3322452124","3319634870","3323042226","3046967128","3325037742","3334845862","3327580210","3313159168","3326630440","3316480774","3327832710","3327620886","3314459756","3320206325","3320328043","3333370544","3319430046","3055539832","3306085657","3309149240","3331260454","3004700383","3333992292","3313006736","3316827280","3302798201","3318985303","3302816109","3316832116","3327371412","3317744947","3228115912","3334310728","3326490467","3320757186","3317536211","3319227278","3333913003","3325523259","3312540828","3312342092","3317490781","3334455717","3131286720","3311393726","3315821308","3325518999","3318879277","3138672676","3331345207","3323983548","3315870497","3325479487","3316015581","3322858077","3322867402","3305260391","3317308727","3319406344","3323095351","3317744915","3334140565","3325172468","3319087955","3312150927","3328877710","3331262754","3232443158","3313043384","3333805652","3314179913","3309089057","3334112377","3324926537","3323162991","3301242898","3168600663","3005614607","3332181670","3331786983","3319893575","3317997142","3314038390","3308412586","3323806362","3326640271","3304397576","3316714482","3323389282","3324390335","3316438689","3317890293","3323952974","3315722832","3332112643","3318046164","3316739155","3317218248","3330959692","3303969560","3325637353","3328606281","3320273573","3318933872","3322178737","3313305585","3303659351","3308614364","3313939643","3308257845","3155721117","3085600056","3319635547","3334150318","3318700480","3304079311","3333506365","3318446560","3306508278","3319596485","3305426072","3248879072","3325019098","3331531814","3314789846","3324975298","3323497908","3312292055","3216715648","3319915923","3329270725","3303947862","3322046712","3328422680","3156308551","3318090724","3323672739","3308732251","3002342388","3321412199","3312831134","3373418296","3373418297","3373418298","3373418299","3373418300","3373418301","3373418302","3373418303","3373418304","3373418305","3373418306","3373418307","3373418308","3373418309","3373418310","3373418311","3373418312","3373418313","3373418314","3373418315","3373418316","3373418317","3373418318","3373418319","3373418320","3373418321","3373418322","3373418323","3373418324","3373418325","3373418326","3373418327","3373418328","3373418329","3373418330","3373418331","3373418332","3373418333","3373418334","3373418335","3373418336","3373418337","3373418338","3373418339","3373418340","3373418341","3373418342","3373418343","3373418344","3373418345","3373418346","3373418347","3373418348","3373418349","3373418350","3373418351","3373418352","3373418353","3373418354","3373418355","3373418356","3373418357","3373418358","3373418359","3373418360","3373418361","3373418362","3373418363","3373418364","3373418365","3373418366","3373418367","3373418368","3373418369","3373418370","3373418371","3373418372","3373418373","3373418374","3373418375","3373418376","3373418377","3373418378","3373418379","3373418380","3373418381","3373418382","3373418383","3373418384","3373418385","3373418386","3373418387","3373418388","3373418389","3373418390","3373418391","3373418392","3373418393","3373418394","3373418395","3373418396","3373418397","3373418398","3373418399","3373418400","3373418401","3373418402","3373418403","3373418404","3373418405","3373418406","3373418407","3373418408","3373418409","3373418410","3373418411","3373418412","3373418413","3373418414","3373418415","3373418416","3373418417","3373418418","3373418419","3373418420","3373418421","3373418422","3373418423","3373418424","3373418425","3373418426","3373418427","3373418428","3373418429","3373418430","3373418431","3373418432","3373418433","3373418434","3373418435","3373418436","3373418437","3373418438","3373418439","3373418440","3373418441","3373418442","3373418443","3373418444","3373418445","3373418446","3373418447","3373418448","3373418449","3373418450","3373418451","3373418452","3373418453","3373418454","3373418455","3373418456","3373418457","3373418458","3373418459","3373418460","3373418461","3373418462","3373418463","3373418464","3373418465","3373418466","3373418467","3373418468","3373418469","3373418470","3373418471","3373418472","3373418473","3373418474","3373418475","3373418476","3373418477","3373418478","3373418479","3373418480","3373418481","3373418482","3373418483","3373418484","3373418485","3373418486","3373418487","3373418488","3373418489","3373418490","3373418491","3373418492","3373418493","3373418494","3373418495","3373418496","3373418497","3373418498","3373418499","3373418500","3373418501","3373418502","3373418503","3373418504","3373418505","3373418506","3373418507","3373418508","3373418509","3373418510","3373418511","3373418512","3373418513","3373418514","3373418515","3373418516","3373418517","3373418518","3373418519","3373418520","3373418521","3373418522","3373418523","3373418524","3373418525","3373418526","3373418527","3373418528","3373418529","3373418530","3373418531","3373418532","3373418533","3373418534","3373418535","3373418536","3373418537","3373418538","3373418539","3373418540","3373418541","3373418542","3373418543","3373418544","3373418545","3373418546","3373418547","3373418548","3373418549","3373418550","3373418551","3373418552","3373418553","3373418554","3373418555","3373418556","3373418557","3373418558","3373418559","3373418560","3373418561","3373418562","3373418563","3373418564","3373418565","3373418566","3373418567","3373418568","3373418569","3373418570","3373418571","3373418572","3373418573","3373418574","3373418575","3373418576","3373418577","3373418578","3373418579","3373418580","3373418581","3373418582","3373418583","3373418584","3373418585","3373418586","3373418587","3373418588","3373418589","3373418590","3373418591","3373418592","3373418593","3373418594","3373418595"]

        fnumbers = fnumbers[::-1]
        # random.shuffle(fnumbers)
        mailcount = 0

        numbers = []
        mai = random.randint(0, len(user) - 1)
        #mai='infokaiengeeringahme.d@gmail.com'


        while (1):
            if (total >= 10):
                break
            try:
                options = webdriver.ChromeOptions()
                # options.add_argument(r'--profile-directory=C:\\Users\\Ahmad\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 3')
                ag = str(generate_user_agent('win'))
                print(ag)

                options.add_argument("--disable-renderer-backgrounding")
                options.add_argument("--disable-backgrounding-occluded-windows")
                # profile_directory = 'C:\\Users\\Ahmad\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 4'
                # options.add_argument(f'user-data-dir={profile_directory}')
                username = 'sphm1kztal'
                 = 'ohdKQ8aHJnig7v87it'
                endpoint = 'pk.smartproxy.com'
                port = '10010'

                proxies_extension = proxies(username, , endpoint, port)

                options.add_argument(
                    '--load-extension=D:\\autologinbot-master\\surf')
                # options.add_argument(
                #    '--user-agent='+ag)

                # options.add_extension(proxies_extension)
                fp=''

                browser = webdriver.Chrome(options=options)





                # profile_directory = 'C:\\Users\\Ahmad\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 4'
                # options.add_argument(f'user-data-dir={profile_directory}')
                # options.add_argument('--load-extension=D:\\autologinbot-master\\surf')


                # = webdriver.Chrome(options=options)
                i = random.randint(2, 57)

                inb = 'infozahid@gmail.com'


                while (1):

                    try:

                        print('h')



                        while (1):
                            time.sleep(40)
                            browser.get(url)



                            mai = random.randint(0, len(user) - 1)
                            print(mai)
                            print(user[mai])







                            try:
                             usernap = WebDriverWait(browser, 25).until(
                                EC.presence_of_element_located((By.ID,
                                                                'owner[email]'))).send_keys(user[mai])
                             time.sleep(2)
                            except:
                                print('a')
                                pass
                            while(1):
                                try:
                                    usernap = WebDriverWait(browser, 25).until(
                                        EC.presence_of_element_located((By.XPATH,
                                                                        '/html/body/article/section[1]/div[2]/div/div/form/div[1]/div[1]/div[7]/button'))).click()
                                    time.sleep(2)


                                    usernap = WebDriverWait(browser, 155).until(
                                        EC.presence_of_element_located((By.ID,
                                                                        'FirstName'))).send_keys('')
                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 155).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(3) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()
                                    time.sleep(2)

                                    usernap = WebDriverWait(browser, 25).until(
                                        EC.presence_of_element_located((By.ID,
                                                                        'LastName'))).send_keys('zhid')



                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(3) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.ID,
                                                                        'address[phone]'))).send_keys('3007982112')
                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(4) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    time.sleep(1)
                                    random_str = ''.join(random.choices(string.ascii_lowercase + string.digits, k=30))
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.ID,
                                                                        'job'))).send_keys('IT')
                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(3) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.ID,
                                                                        'account[name]'))).send_keys(random_str)

                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(3) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        '#account\[help_desk_size\] > option:nth-child(2)'))).click()
                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(3) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(3) > div.link-group.form-btn-group > button.katamari-field.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.ID,
                                                                        'owner[]'))).send_keys('jamal@123J')
                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.field-container > div.step.js-step.js-steppable.js-step-enabled.active > div:nth-child(4) > div.link-group.form-btn-group > button.button.button-medium.button-primary.form-submit-btn.js-submit-btn'))).click()

                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.success-message.js-success-message.step.js-step.js-steppable.success-container.active > div.link-group.link-group-center > a:nth-child(1)')))
                                    time.sleep(40)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        'body > article > section.container.grid.centered > div:nth-child(2) > div > div > form > div.success-message.js-success-message.step.js-step.js-steppable.success-container.active > div.link-group.link-group-center > a:nth-child(1)'))).click()


                                    p=(read_email_from_gmail(mai=mai))
                                    print(p)

                                    msg=''
                                    mc = ''

                                    email = "infokamalhme.d@gmail.com"
                                    keyword = "Zendesk"

                                    #body = get_email_bodys(email)
                                    #email_bodies= get_email_b(email,'Verify')
                                    pattern = r"<(https?://.*?verification/email/.*?)>"
                                    pattern = r'<a href=3D"(https://[^"]+)'
                                    mc = ''
                                    matches = re.findall(pattern, str(p))

                                    if matches:
                                        # Extracted links will be in the 'matches' list

                                        for i, link in enumerate(matches, start=1):
                                            print(f"Link {i}: {link}")
                                            mc = link


                                    mc=mc.replace('=', '')
                                    print(mc)

                                    ul=mc

                                    subdomain = random_str

                                    if subdomain:
                                        subdomain = random_str
                                    lk='https://'+str(subdomain)+'.zendesk.com/admin/account/security/advanced#authentication'
                                    print(lk)


                                    # Switch to the newly opened tab
                                    browser.switch_to.window(browser.window_handles[
                                                                 1])  # Use 0 for the first tab, 1 for the second, and so on
                                    browser.get(ul)

                                    time.sleep(5)

                                    browser.get(lk)
                                    time.sleep(2)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.XPATH,
                                                                        '/html/body/div[1]/div/div/div[2]/div/div[1]/main/div/div[2]/div[3]/div/div/div[1]/div/label'))).click()
                                    time.sleep(1)
                                    usernap = WebDriverWait(browser, 60).until(
                                        EC.presence_of_element_located((By.CSS_SELECTOR,
                                                                        '#main > div > div > div.StyledChrome-sc-1uqm6u6-0.fMgCim > div > footer > div > div:nth-child(2) > button'))).click()

                                    file_path = "email_numbers.txt"

                                    # Open the file for appending
                                    file_path = "email_numbers.txt"

                                    # Open the file for appending
                                    with open(file_path, 'a') as file:
                                        # Write the email, number, and link to the file
                                        file.write(f"{user[mai]} {fnumbers[recount]} {ul}\n")

                                    print("Email and number saved to", file_path)


                                    time.sleep(5000)
                                    otp1 = re.findall("\d\d\d\d\d\d", str(emails))
                                    count += 1
                                    print(count)
                                    if (recount < (len(fnumbers) - 1)):
                                        recount = recount + 1
                                    else:
                                        recount = 0


                                except Exception as e :
                                    print('masla')
                                    print(e)
                                    print(a)
                                    pass






















                    except  Exception as e:
                        print(a)
                        pass








            except:
                print(a)



                browser.quit()
                print('biggest exception')
